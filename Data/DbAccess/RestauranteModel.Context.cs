//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data.DbAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RestauranteEntities : DbContext
    {
        public RestauranteEntities()
            : base("name=RestauranteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CategoriaProducto> CategoriasProductos { get; set; }
        public virtual DbSet<Ciudad> Ciudades { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<Empleado> Empleados { get; set; }
        public virtual DbSet<Estado> Estados { get; set; }
        public virtual DbSet<Menu> Menues { get; set; }
        public virtual DbSet<Orden> Ordenes { get; set; }
        public virtual DbSet<OrdenDetalle> OrdenesDetalles { get; set; }
        public virtual DbSet<Pais> Paises { get; set; }
        public virtual DbSet<ProductoMenu> ProductosMenues { get; set; }
        public virtual DbSet<Provincia> Provincias { get; set; }
        public virtual DbSet<Rol> Roles { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<Producto> Productos { get; set; }
        public virtual DbSet<Sucursal> Sucursales { get; set; }
        public virtual DbSet<ImagenProducto> ImagenesProductos { get; set; }
    
        public virtual int sp_IngresarClientes(string nombreCliente, string apellidoCliente, Nullable<System.DateTime> fechaNacimiento, Nullable<int> codigoPaisNacimiento, Nullable<int> codigoUsuario)
        {
            var nombreClienteParameter = nombreCliente != null ?
                new ObjectParameter("NombreCliente", nombreCliente) :
                new ObjectParameter("NombreCliente", typeof(string));
    
            var apellidoClienteParameter = apellidoCliente != null ?
                new ObjectParameter("ApellidoCliente", apellidoCliente) :
                new ObjectParameter("ApellidoCliente", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var codigoPaisNacimientoParameter = codigoPaisNacimiento.HasValue ?
                new ObjectParameter("CodigoPaisNacimiento", codigoPaisNacimiento) :
                new ObjectParameter("CodigoPaisNacimiento", typeof(int));
    
            var codigoUsuarioParameter = codigoUsuario.HasValue ?
                new ObjectParameter("CodigoUsuario", codigoUsuario) :
                new ObjectParameter("CodigoUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IngresarClientes", nombreClienteParameter, apellidoClienteParameter, fechaNacimientoParameter, codigoPaisNacimientoParameter, codigoUsuarioParameter);
        }
    
        public virtual int sp_IngresarEmpleados(string nombreEmpleado, string apellidoEmpleado, Nullable<System.DateTime> fechaNacimiento, Nullable<int> codigoPaisNacimiento, Nullable<int> codigoUsuario, Nullable<int> codigoSucursal)
        {
            var nombreEmpleadoParameter = nombreEmpleado != null ?
                new ObjectParameter("NombreEmpleado", nombreEmpleado) :
                new ObjectParameter("NombreEmpleado", typeof(string));
    
            var apellidoEmpleadoParameter = apellidoEmpleado != null ?
                new ObjectParameter("ApellidoEmpleado", apellidoEmpleado) :
                new ObjectParameter("ApellidoEmpleado", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var codigoPaisNacimientoParameter = codigoPaisNacimiento.HasValue ?
                new ObjectParameter("CodigoPaisNacimiento", codigoPaisNacimiento) :
                new ObjectParameter("CodigoPaisNacimiento", typeof(int));
    
            var codigoUsuarioParameter = codigoUsuario.HasValue ?
                new ObjectParameter("CodigoUsuario", codigoUsuario) :
                new ObjectParameter("CodigoUsuario", typeof(int));
    
            var codigoSucursalParameter = codigoSucursal.HasValue ?
                new ObjectParameter("CodigoSucursal", codigoSucursal) :
                new ObjectParameter("CodigoSucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IngresarEmpleados", nombreEmpleadoParameter, apellidoEmpleadoParameter, fechaNacimientoParameter, codigoPaisNacimientoParameter, codigoUsuarioParameter, codigoSucursalParameter);
        }
    
        public virtual int sp_IngresarProductos(string nombreProducto, string descripcionProducto, Nullable<decimal> costo, Nullable<decimal> precioVenta, Nullable<int> codigoCategoria)
        {
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("NombreProducto", nombreProducto) :
                new ObjectParameter("NombreProducto", typeof(string));
    
            var descripcionProductoParameter = descripcionProducto != null ?
                new ObjectParameter("DescripcionProducto", descripcionProducto) :
                new ObjectParameter("DescripcionProducto", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("PrecioVenta", precioVenta) :
                new ObjectParameter("PrecioVenta", typeof(decimal));
    
            var codigoCategoriaParameter = codigoCategoria.HasValue ?
                new ObjectParameter("CodigoCategoria", codigoCategoria) :
                new ObjectParameter("CodigoCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IngresarProductos", nombreProductoParameter, descripcionProductoParameter, costoParameter, precioVentaParameter, codigoCategoriaParameter);
        }
    }
}
